{
  "info": {
    "name": "ZMemory API",
    "description": "Complete API testing collection for ZMemory backend service",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "noauth"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set dynamic variables",
          "pm.globals.set('timestamp', new Date().toISOString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global response validation",
          "pm.test('Response time is acceptable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(2000);",
          "});",
          "",
          "pm.test('Response has correct content type', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "{{apiUrl}}",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has correct structure', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('status', 'healthy');",
              "    pm.expect(responseJson).to.have.property('timestamp');",
              "    pm.expect(responseJson).to.have.property('service', 'zmemory-api');",
              "    pm.expect(responseJson).to.have.property('version');",
              "});",
              "",
              "pm.test('Timestamp is valid', function () {",
              "    const responseJson = pm.response.json();",
              "    const timestamp = new Date(responseJson.timestamp);",
              "    pm.expect(timestamp).to.be.instanceOf(Date);",
              "    pm.expect(isNaN(timestamp.getTime())).to.be.false;",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/health",
          "host": ["{{baseUrl}}"],
          "path": ["api", "health"]
        },
        "description": "Check the health status of the API service"
      }
    },
    {
      "name": "Get All Memories",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response is an array', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.be.an('array');",
              "});",
              "",
              "pm.test('Memory objects have correct structure', function () {",
              "    const responseJson = pm.response.json();",
              "    if (responseJson.length > 0) {",
              "        const memory = responseJson[0];",
              "        pm.expect(memory).to.have.property('id');",
              "        pm.expect(memory).to.have.property('type');",
              "        pm.expect(memory).to.have.property('content');",
              "        pm.expect(memory).to.have.property('created_at');",
              "        pm.expect(memory).to.have.property('updated_at');",
              "        ",
              "        // Store first memory ID for later tests",
              "        pm.globals.set('memoryId', memory.id);",
              "    }",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/memories",
          "host": ["{{baseUrl}}"],
          "path": ["api", "memories"]
        },
        "description": "Retrieve all memories"
      }
    },
    {
      "name": "Get Memories with Type Filter",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('All returned memories have correct type', function () {",
              "    const responseJson = pm.response.json();",
              "    responseJson.forEach(function(memory) {",
              "        pm.expect(memory.type).to.equal('task');",
              "    });",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/memories?type=task",
          "host": ["{{baseUrl}}"],
          "path": ["api", "memories"],
          "query": [
            {
              "key": "type",
              "value": "task"
            }
          ]
        },
        "description": "Retrieve memories filtered by type"
      }
    },
    {
      "name": "Get Memories with Pagination",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response respects limit parameter', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.length).to.be.at.most(5);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/memories?limit=5&offset=0",
          "host": ["{{baseUrl}}"],
          "path": ["api", "memories"],
          "query": [
            {
              "key": "limit",
              "value": "5"
            },
            {
              "key": "offset",
              "value": "0"
            }
          ]
        },
        "description": "Test pagination parameters"
      }
    },
    {
      "name": "Create New Task Memory",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 201', function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Created memory has correct structure', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('id');",
              "    pm.expect(responseJson).to.have.property('type', 'task');",
              "    pm.expect(responseJson).to.have.property('content');",
              "    pm.expect(responseJson.content).to.have.property('title', 'API Test Task');",
              "    pm.expect(responseJson.content).to.have.property('status', 'pending');",
              "    pm.expect(responseJson.content).to.have.property('priority', 'high');",
              "    pm.expect(responseJson).to.have.property('tags');",
              "    pm.expect(responseJson.tags).to.include('api-test');",
              "    pm.expect(responseJson).to.have.property('created_at');",
              "    pm.expect(responseJson).to.have.property('updated_at');",
              "    ",
              "    // Store created memory ID for update/delete tests",
              "    pm.globals.set('createdMemoryId', responseJson.id);",
              "});",
              "",
              "pm.test('ID is valid UUID', function () {",
              "    const responseJson = pm.response.json();",
              "    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;",
              "    pm.expect(responseJson.id).to.match(uuidRegex);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"type\": \"task\",\n  \"content\": {\n    \"title\": \"API Test Task\",\n    \"description\": \"This task was created via API testing\",\n    \"status\": \"pending\",\n    \"priority\": \"high\",\n    \"due_date\": \"2024-08-15T00:00:00Z\"\n  },\n  \"tags\": [\"api-test\", \"postman\", \"automation\"],\n  \"metadata\": {\n    \"created_by\": \"postman\",\n    \"test_run\": true\n  }\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/memories",
          "host": ["{{baseUrl}}"],
          "path": ["api", "memories"]
        },
        "description": "Create a new task memory"
      }
    },
    {
      "name": "Get Specific Memory",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Use the ID from the created memory",
              "const memoryId = pm.globals.get('createdMemoryId');",
              "if (!memoryId) {",
              "    throw new Error('No memory ID available. Run \"Create New Task Memory\" first.');",
              "}"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has correct memory', function () {",
              "    const responseJson = pm.response.json();",
              "    const expectedId = pm.globals.get('createdMemoryId');",
              "    pm.expect(responseJson.id).to.equal(expectedId);",
              "    pm.expect(responseJson.type).to.equal('task');",
              "    pm.expect(responseJson.content.title).to.equal('API Test Task');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/memories/{{createdMemoryId}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "memories", "{{createdMemoryId}}"]
        },
        "description": "Retrieve a specific memory by ID"
      }
    },
    {
      "name": "Update Memory",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Use the ID from the created memory",
              "const memoryId = pm.globals.get('createdMemoryId');",
              "if (!memoryId) {",
              "    throw new Error('No memory ID available. Run \"Create New Task Memory\" first.');",
              "}"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Memory was updated correctly', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.content.status).to.equal('completed');",
              "    pm.expect(responseJson.tags).to.include('completed');",
              "    pm.expect(responseJson.updated_at).to.not.equal(responseJson.created_at);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"content\": {\n    \"status\": \"completed\"\n  },\n  \"tags\": [\"api-test\", \"postman\", \"automation\", \"completed\"]\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/memories/{{createdMemoryId}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "memories", "{{createdMemoryId}}"]
        },
        "description": "Update an existing memory"
      }
    },
    {
      "name": "Delete Memory",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Use the ID from the created memory",
              "const memoryId = pm.globals.get('createdMemoryId');",
              "if (!memoryId) {",
              "    throw new Error('No memory ID available. Run \"Create New Task Memory\" first.');",
              "}"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response confirms deletion', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('message');",
              "    pm.expect(responseJson.message).to.include('deleted successfully');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/memories/{{createdMemoryId}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "memories", "{{createdMemoryId}}"]
        },
        "description": "Delete a memory"
      }
    },
    {
      "name": "Verify Memory Deleted",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 404', function () {",
              "    pm.response.to.have.status(404);",
              "});",
              "",
              "pm.test('Error message is correct', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('error');",
              "    pm.expect(responseJson.error).to.include('not found');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/memories/{{createdMemoryId}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "memories", "{{createdMemoryId}}"]
        },
        "description": "Verify that the deleted memory no longer exists"
      }
    },
    {
      "name": "Create Note Memory",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 201', function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Note memory created correctly', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.type).to.equal('note');",
              "    pm.expect(responseJson.content.title).to.equal('API Documentation Notes');",
              "    pm.expect(responseJson.content.format).to.equal('markdown');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"type\": \"note\",\n  \"content\": {\n    \"title\": \"API Documentation Notes\",\n    \"content\": \"# ZMemory API\\n\\nThis API provides memory management functionality for ZephyrOS.\\n\\n## Key Features\\n- CRUD operations for memories\\n- Flexible content types\\n- Tag-based organization\",\n    \"format\": \"markdown\"\n  },\n  \"tags\": [\"documentation\", \"api\", \"notes\"]\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/memories",
          "host": ["{{baseUrl}}"],
          "path": ["api", "memories"]
        },
        "description": "Create a note-type memory"
      }
    },
    {
      "name": "Create Bookmark Memory",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 201', function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Bookmark memory created correctly', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.type).to.equal('bookmark');",
              "    pm.expect(responseJson.content.url).to.equal('https://nextjs.org/docs');",
              "    pm.expect(responseJson.content.title).to.equal('Next.js Documentation');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"type\": \"bookmark\",\n  \"content\": {\n    \"title\": \"Next.js Documentation\",\n    \"url\": \"https://nextjs.org/docs\",\n    \"description\": \"Official Next.js documentation for reference\",\n    \"favicon\": \"https://nextjs.org/favicon.ico\"\n  },\n  \"tags\": [\"development\", \"nextjs\", \"documentation\", \"reference\"]\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/memories",
          "host": ["{{baseUrl}}"],
          "path": ["api", "memories"]
        },
        "description": "Create a bookmark-type memory"
      }
    },
    {
      "name": "Test Invalid Data",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 400', function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test('Error response has correct structure', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('error');",
              "    pm.expect(responseJson.error).to.include('Invalid data format');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"content\": {\n    \"title\": \"Missing type field\"\n  }\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/memories",
          "host": ["{{baseUrl}}"],
          "path": ["api", "memories"]
        },
        "description": "Test validation with invalid data"
      }
    },
    {
      "name": "Test Nonexistent Memory",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 404', function () {",
              "    pm.response.to.have.status(404);",
              "});",
              "",
              "pm.test('Error message is appropriate', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('error');",
              "    pm.expect(responseJson.error).to.include('not found');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/memories/00000000-0000-0000-0000-000000000000",
          "host": ["{{baseUrl}}"],
          "path": ["api", "memories", "00000000-0000-0000-0000-000000000000"]
        },
        "description": "Test accessing a nonexistent memory"
      }
    }
  ]
}